{"renpy": {"renpy.count_seen_dialogue_blocks": ["internal", "function", "()", "", "", "Returns the number of dialogue blocks the user has seen in any play-through of the current game."], "renpy.timeout": ["internal", "function", "(seconds)", "", "", "Causes an event to be generated before `seconds` seconds have elapsed. This ensures that the event method of a user-defined displayable will be called."], "renpy.context": ["internal", "function", "()", "", "", "Returns an object that is unique to the current context. The object is copied when entering a new context, but changes to the copy do not change the original.\n\nThe object is saved and participates in rollback."], "renpy.sound.get_pos": ["internal", "function", "(channel=\"sound\")", "", "", "Returns the current position of the audio or video file on `channel`, in seconds. Returns None if no audio is playing on `channel`.\n\nAs this may return None before a channel starts playing, or if the audio channel involved has been muted, callers of this function should always handle a None value."], "renpy.clear_keymap_cache": ["internal", "function", "()", "", "", "Clears the keymap cache. This allows changes to :var:`config.keymap` to take effect without restarting Ren'Py."], "renpy.error": ["internal", "function", "(msg)", "", "", "Reports `msg`, a string, as as error for the user. This is logged as a parse or lint error when approprate, and otherwise it is raised as an exception."], "renpy.fnmatch": ["internal", "function", "()", "", "", "Filename matching with shell patterns.\n\nfnmatch(FILENAME, PATTERN) matches according to the local convention. fnmatchcase(FILENAME, PATTERN) always takes case in account.\n\nThe functions operate by translating the pattern into a regular expression.  They cache the compiled regular expressions for speed.\n\nThe function translate(PATTERN) returns a regular expression corresponding to PATTERN.  (It does not compile it.)"], "renpy.get_physical_size": ["internal", "function", "()", "", "", "Returns the size of the physical window."], "renpy.ios": ["other", "renpy.ios", "", "", "var", "Has a true value when running on iOS."], "renpy.language_tailor": ["other", "renpy.language_tailor", "(chars, cls)", "", "function", "This can be used to override the line breaking class of a character. For example, the linebreaking class of a character can be set to ID to treat it as an ideograph, which allows breaks before and after that character.\n\n`chars` A string containing each of the characters to tailor.\n\n`cls` A string giving a character class. This should be one of the classes defined in Table 1 of `UAX #14: Unicode Line Breaking Algorithm <http://www.unicode.org/reports/tr14/tr14-30.html>`_."], "renpy.music.queue": ["internal", "function", "(filenames, channel=\"music\", loop=None, clear_queue=True, fadein=0, tight=None, relative_volume=1.0)", "", "", "This queues the given filenames on the specified channel.\n\n`filenames` This may be a single file, or a list of files to be played.\n\n`channel` The channel to play the sound on.\n\n`loop` If this is True, the tracks will loop while they are the last thing in the queue.\n\n`clear_queue` If True, then the queue is cleared, making these files the files that are played when the currently playing file finishes. If it is False, then these files are placed at the back of the queue. In either case, if no music is playing these files begin playing immediately.\n\n`fadein` This is the number of seconds to fade the music in for, on the first loop only.\n\n`tight` If this is True, then fadeouts will span into the next-queued sound. If None, this is true when loop is True, and false otherwise.\n\n`relative_volume` This is the volume relative to the current channel volume. The specified file will be played at that relative volume. If not specified, it will always default to 1.0, which plays the file at the original volume as determined by the mixer, channel and secondary volume.\n\nThis clears the pause flag for `channel`."], "renpy.shown_window": ["internal", "function", "()", "", "", "Call this to indicate that the window has been shown. This interacts with the \\window show\\ statement, which shows an empty window whenever this functions has not been called during an interaction."], "renpy.with_statement": ["internal", "function", "(trans, always=False)", "", "", "Causes a transition to occur. This is the Python equivalent of the with statement.\n\n`trans` The transition.\n\n`always` If True, the transition will always occur, even if the user has disabled transitions.\n\nThis function returns true if the user chose to interrupt the transition, and false otherwise."], "renpy.get_placement": ["internal", "function", "(d)", "", "", "This gets the placement of displayable d. There's very little warranty on this information, as it might change when the displayable is rendered, and might not exist until the displayable is first rendered.\n\nThis returns an object with the following fields, each corresponding to a style property:\n\n* pos * xpos * ypos * anchor * xanchor * yanchor * offset * xoffset * yoffset * subpixel"], "renpy.try_compile": ["internal", "function", "(where, expr, additional=None)", "", "", "Tries to compile an expression, and writes an error to lint.txt if it fails.\n\n`where` A string giving the location the expression is found. Used to generate an error message of the form \\Could not evaluate `expr` in `where`.\\\n\n`expr` The expression to try compiling.\n\n`additional` If given, an additional line of information that is addded to the error message."], "renpy.Render.add_uniform": ["cdd", "add_uniform", "(name, value)", "renpy.Render", "method", "Causes the uniform `name` to have `value` when this Render or its children are drawn."], "renpy.show_screen": ["internal", "function", "(_screen_name, *_args, **kwargs)", "", "", "The programmatic equivalent of the show screen statement.\n\nShows the named screen. This takes the following keyword arguments:\n\n`_screen_name` The name of the screen to show. `_layer` The layer to show the screen on. `_zorder` The zorder to show the screen on. If not specified, defaults to the zorder associated with the screen. It that's not specified, it is 0 by default. `_tag` The tag to show the screen with. If not specified, defaults to the tag associated with the screen. It that's not specified, defaults to the name of the screen. `_widget_properties` A map from the id of a widget to a property name -> property value map. When a widget with that id is shown by the screen, the specified properties are added to it. `_transient` If true, the screen will be automatically hidden at the end of the current interaction.\n\nNon-keyword arguments, and keyword arguments that do not begin with an underscore, are passed to the screen."], "renpy.threading": ["internal", "function", "()", "", "", "Thread module emulating a subset of Java's threading model."], "renpy.get_autoreload": ["internal", "function", "()", "", "", "Gets the autoreload flag."], "renpy.movie_cutscene": ["internal", "function", "(filename, delay=None, loops=0, stop_music=True)", "", "", "This displays a movie cutscene for the specified number of seconds. The user can click to interrupt the cutscene. Overlays and Underlays are disabled for the duration of the cutscene.\n\n`filename` The name of a file containing any movie playable by Ren'Py.\n\n`delay` The number of seconds to wait before ending the cutscene. Normally the length of the movie, in seconds. If None, then the delay is computed from the number of loops (that is, loops + 1) * the length of the movie. If -1, we wait until the user clicks.\n\n`loops` The number of extra loops to show, -1 to loop forever.\n\nReturns True if the movie was terminated by the user, or False if the given delay elapsed uninterrupted."], "renpy.force_autosave": ["internal", "function", "(take_screenshot=False, block=False)", "", "", "Forces a background autosave to occur.\n\n`take_screenshot` If True, a new screenshot will be taken. If False, the existing screenshot will be used.\n\n`block` If True, blocks until the autosave completes."], "renpy.register_statement": ["internal", "function", "(name, parse=None, lint=None, execute=None, predict=None, next=None, scry=None, block=False, init=False, translatable=False, execute_init=None, init_priority=0, label=None, warp=None, translation_strings=None, force_begin_rollback=False, post_execute=None, post_label=None, predict_all=True, predict_next=None)", "", "", "This registers a user-defined statement.\n\n`name` This is either a space-separated list of names that begin the statement, or the empty string to define a new default statement (the default statement will replace the say statement).\n\n`block` When this is False, the statement does not expect a block. When True, it expects a block, but leaves it up to the lexer to parse that block. If the string \\script\\, the block is interpreted as containing one or more Ren'Py script language statements. If the string \\possible\\, the block expect condition is determined by the parse function.\n\n`parse` This is a function that takes a Lexer object. This function should parse the statement, and return an object. This object is passed as an argument to all the other functions.\n\n`lint` This is called to check the statement. It is passed a single argument, the object returned from parse. It should call renpy.error to report errors.\n\n`execute` This is a function that is called when the statement executes. It is passed a single argument, the object returned from parse.\n\n`execute_init` This is a function that is called at init time, at priority 0.\n\n`predict` This is a function that is called to predict the images used by the statement. It is passed a single argument, the object returned from parse. It should return a list of displayables used by the statement.\n\n`next` This is a function that is called to determine the next statement.\n\nIf `block` is not \\script\\, this is passed a single argument, the object returned from the parse function. If `block` is \\script\\, an additional argument is passed, an object that names the first statement in the block.\n\nThe function should return either a string giving a label to jump to, the second argument to transfer control into the block, or None to continue to the statement after this one.\n\n`label` This is a function that is called to determine the label of this statement. If it returns a string, that string is used as the statement label, which can be called and jumped to like any other label.\n\n`warp` This is a function that is called to determine if this statement should execute during warping. If the function exists and returns true, it's run during warp, otherwise the statement is not run during warp.\n\n`scry` Used internally by Ren'Py.\n\n`init` True if this statement should be run at init-time. (If the statement is not already inside an init block, it's automatically placed inside an init block.) This calls the execute function, in addition to the execute_init function.\n\n`init_priority` An integer that determines the priority of initialization of the init block.\n\n`translation_strings` A function that is called with the parsed block. It's expected to return a list of strings, which are then reported as being available to be translated.\n\n`force_begin_rollback` This should be set to true on statements that are likely to cause the end of a fast skip, similar to ``menu`` or ``call screen``.\n\n`post_execute` A function that is executed as part the next statement after this one. (Adding a post_execute function changes the contents of the RPYC file, meaning a Force Compile is necessary.)\n\n`post_label` This is a function that is called to determine the label of this the post execute statement. If it returns a string, that string is used as the statement label, which can be called and jumped to like any other label. This can be used to create a unique return point.\n\n`predict_all` If True, then this predicts all sub-parses of this statement and the statement after this statement.\n\n`predict_next` This is called with a single argument, the label of the statement that would run after this statement.\n\nThis should be called to predict the statements that can run after this one. It's expected to return a list of of labels or SubParse objects. This is not called if `predict_all` is true."], "renpy.sound.register_channel": ["audio", "renpy.music.register_channel", "(name, mixer=None, loop=None, stop_on_mute=True, tight=False, file_prefix=\"\", file_suffix=\"\", buffer_queue=True, movie=False, framedrop=True)", "", "", "This registers a new audio channel named `name`. Audio can then be played on the channel by supplying the channel name to the play or queue statements.\n\n`mixer` The name of the mixer the channel uses. By default, Ren'Py knows about the \\music\\, \\sfx\\, and \\voice\\ mixers. Using other names is possible, but may require changing the preferences screens.\n\n`loop` If true, sounds on this channel loop by default.\n\n`stop_on_mute` If true, music on the channel is stopped when the channel is muted.\n\n`tight` If true, sounds will loop even when fadeout is occurring. This should be set to True for a sound effects or seamless music channel, and False if the music fades out on its own.\n\n`file_prefix` A prefix that is prepended to the filenames of the sound files being played on this channel.\n\n`file_suffix` A suffix that is appended to the filenames of the sound files being played on this channel.\n\n`buffer_queue` Should we buffer the first second or so of a queued file? This should be True for audio, and False for movie playback.\n\n`movie` If true, this channel will be set up to play back videos.\n\n`framedrop` This controls what a video does when lagging. If true, frames will be dropped to keep up with realtime and the soundtrack. If false, Ren'Py will display frames late rather than dropping them."], "renpy.save_persistent": ["internal", "function", "()", "", "", "Saves the persistent data to disk."], "renpy.list_saved_games": ["internal", "function", "(regexp=r'.', fast=False)", "", "", "Lists the save games. For each save game, returns a tuple containing:\n\n* The filename of the save. * The extra_info that was passed in. * A displayable that, when displayed, shows the screenshot that was   used when saving the game. * The time the game was stayed at, in seconds since the UNIX epoch.\n\n`regexp` A regular expression that is matched against the start of the filename to filter the list.\n\n`fast` If fast is true, the filename is returned instead of the tuple."], "renpy.mark_label_unseen": ["internal", "function", "(label)", "", "", "Marks the named label as if it has not been executed on the current user's system yet."], "renpy.transition": ["internal", "function", "(trans, layer=None, always=False)", "", "", "Sets the transition that will be used during the next interaction.\n\n`layer` The layer the transition applies to. If None, the transition applies to the entire scene.\n\n`always` If false, this respects the transition preference. If true, the transition is always run."], "renpy.context_dynamic": ["internal", "function", "(*vars)", "", "", "This can be given one or more variable names as arguments. This makes the variables dynamically scoped to the current context. The variables will be reset to their original value when the call returns.\n\nAn example call is\n```\n$ renpy.context_dynamic(\\x\\, \\y\\, \\z\\)\n```"], "renpy.reset_physical_size": ["internal", "function", "()", "", "", "Attempts to set the size of the physical window to the specified values in renpy.config. (That is, screen_width and screen_height.) This has the side effect of taking the screen out of fullscreen mode."], "renpy.can_show": ["internal", "function", "(name, layer=None, tag=None)", "", "", "Determines if `name` can be used to show an image. This interprets `name` as a tag and attributes. This is combined with the attributes of the currently-showing image with `tag` on `layer` to try to determine a unique image to show. If a unique image can be show, returns the name of that image as a tuple. Otherwise, returns None.\n\n`tag` The image tag to get attributes from. If not given, defaults to the first component of `name`.\n\n`layer` The layer to check. If None, uses the default layer for `tag`."], "renpy.has_image": ["internal", "function", "(name, exact=False)", "", "", "Return true if an image with `name` exists, and false if no such image exists.\n\n`name` Either a string giving an image name, or a tuple of strings giving the name components.\n\n`exact` Returns true if and only if an image with the exact name exists - parameterized matches are not included."], "renpy.get_mode": ["internal", "function", "()", "", "", "Returns the current mode, or None if it is not defined."], "renpy.image_size": ["internal", "function", "(im)", "", "", "Given an image manipulator, loads it and returns a (``width``, ``height``) tuple giving its size.\n\nThis reads the image in from disk and decompresses it, without using the image cache. This can be slow."], "renpy.sound.get_duration": ["internal", "function", "(channel=\"sound\")", "", "", "Returns the duration of the audio or video file on `channel`. Returns 0.0 if no file is playing on `channel`."], "renpy.force_full_redraw": ["internal", "function", "()", "", "", "Forces the screen to be redrawn in full. Call this after using pygame to redraw the screen directly."], "renpy.try_eval": ["internal", "function", "(where, expr, additional=None)", "", "", "Tries to evaluate an expression, and writes an error to lint.txt if it fails.\n\n`where` A string giving the location the expression is found. Used to generate an error message of the form \\Could not evaluate `expr` in `where`.\\\n\n`expr` The expression to try evaluating.\n\n`additional` If given, an additional line of information that is addded to the error message."], "renpy.sound.set_volume": ["internal", "function", "(volume, delay=0, channel=\"sound\")", "", "", "Sets the volume of this channel, as a fraction of the volume of the mixer controlling the channel.\n\n`volume` This is a number between 0.0 and 1.0, and is interpreted as a fraction of the mixer volume for the channel.\n\n`delay` It takes delay seconds to change/fade the volume from the old to the new value. This value is persisted into saves, and participates in rollback.\n\n`channel` The channel to be set"], "renpy.version_string": ["other", "renpy.version_string", "", "", "var", "The version number of Ren'Py, as a string of the form \\Ren'Py 1.2.3.456\\."], "renpy.music.set_pan": ["internal", "function", "(pan, delay, channel=\"music\")", "", "", "Sets the pan of this channel.\n\n`pan` A number between -1 and 1 that control the placement of the audio. If this is -1, then all audio is sent to the left channel. If it's 0, then the two channels are equally balanced. If it's 1, then all audio is sent to the right ear.\n\n`delay` The amount of time it takes for the panning to occur.\n\n`channel` The channel the panning takes place on. This can be a sound or a music channel. Often, this is channel 7, the default music channel."], "renpy.load": ["internal", "function", "(filename)", "", "", "Loads the list of shaders from the file, and compiles all shaders for which the parts exist, and for which compilation can succeed."], "renpy.predict_show_display_say": ["internal", "function", "(who, what, who_args, what_args, window_args, image=False, two_window=False, side_image=None, screen=None, properties=None, **kwargs)", "", "", "This is the default function used by Character to predict images that will be used by show_display_say. It's called with more-or-less the same parameters as show_display_say, and it's expected to return a list of images used by show_display_say."], "renpy.MenuEntry": ["internal", "class", "()", "", "", "The object passed into the choice screen."], "renpy.get_skipping": ["internal", "function", "()", "", "", "Returns \\slow\\ if the Ren'Py is skipping, \\fast\\ if Ren'Py is fast skipping, and None if it is not skipping."], "renpy.seen_audio": ["internal", "function", "(filename)", "", "", "Returns True if the given filename has been played at least once on the current user's system."], "renpy.focus_coordinates": ["internal", "function", "()", "", "", "This attempts to find the coordinates of the currently-focused displayable. If it can, it will return them as a (x, y, w, h) tuple. If not, it will return a (None, None, None, None) tuple."], "renpy.list_images": ["internal", "function", "()", "", "", "Returns a list of images that have been added to Ren'Py, as a list of strings with spaces between the name components."], "renpy.Render.canvas": ["cdd", "canvas", "()", "renpy.Render", "method", "Returns a canvas object. A canvas object has methods corresponding to the `pygame.draw <http://www.pygame.org/docs/ref/draw.html>`_ functions, with the first parameter (the surface) omitted.\n\nCanvas objects also have a get_surface() method that returns the pygame Surface underlying the canvas."], "renpy.rename_save": ["internal", "function", "(old, new)", "", "", "Renames a save from `old` to `new`. (Does nothing if `old` does not exist.)"], "renpy.get_side_image": ["internal", "function", "(prefix_tag, image_tag=None, not_showing=None, layer=None)", "", "", "This attempts to find an image to show as the side image.\n\nIt begins by determining a set of image attributes. If `image_tag` is given, it gets the image attributes from the tag. Otherwise, it gets them from the currently showing character.\n\nIt then looks up an image with the tag `prefix_tag` and those attributes, and returns it if it exists.\n\nIf not_showing is True, this only returns a side image if the image the attributes are taken from is not on the screen. If Nome, the value is taken from :var:`config.side_image_only_not_showing`.\n\nIf `layer` is None, uses the default layer for the currently showing tag."], "renpy.predicting": ["internal", "function", "()", "", "", "Returns true if Ren'Py is currently predicting the screen."], "renpy.call": ["internal", "function", "(label, *args, **kwargs)", "", "", "Causes the current Ren'Py statement to terminate, and a jump to a `label` to occur. When the jump returns, control will be passed to the statement following the current statement.\n\n`from_current` If true, control will return to the current statement, rather than the statement following the current statement. (This will lead to the current statement being run twice. This must be passed as a keyword argument.)"], "renpy.get_registered_image": ["internal", "function", "(name)", "", "", "If an image with the same name has been registered with renpy.register_image, returns it. Otherwise, returns None."], "renpy.in_rollback": ["internal", "function", "()", "", "", "Returns true if the game has been rolled back."], "renpy.get_identifier_checkpoints": ["internal", "function", "(identifier)", "", "", "Given a rollback_identifier from a HistoryEntry object, returns the number of checkpoints that need to be passed to :func:`renpy.rollback` to reach that identifier. Returns None of the identifier is not in the rollback history."], "renpy.mark_image_unseen": ["internal", "function", "(name)", "", "", "Marks the named image as if it has not been displayed on the current user's system yet."], "renpy.has_label": ["internal", "function", "(name)", "", "", "Returns true if `name` is a valid label the program, or false otherwise.\n\n`name` Should be a string to check for the existence of a label. It can also be an opaque tuple giving the name of a non-label statement."], "renpy.slot_screenshot": ["internal", "function", "(slotname)", "", "", "Returns a display that can be used as the screenshot for `slotname`, or None if the slot is empty."], "renpy.get_filename_line": ["internal", "function", "()", "", "", "Returns a pair giving the filename and line number of the current statement."], "renpy.get_attributes": ["internal", "function", "(layer, tag, default=())", "", "", "Return a tuple giving the image attributes for the image `tag`. If the image tag has not had any attributes associated since the last time it was hidden, returns `if_hidden`.\n\n`layer` The layer to check. If None, uses the default layer for `tag`."], "renpy.get_mouse_name": ["internal", "function", "(interaction=False)", "", "", "Returns the name of the mouse that should be shown.\n\n `interaction` If true, get a mouse name that is based on the type of interaction occuring. (This is rarely useful.)"], "renpy.mark_audio_seen": ["internal", "function", "(filename)", "", "", "Marks the given filename as if it has been already played on the current user's system."], "renpy.license": ["other", "renpy.license", "", "", "var", "A string giving license text that should be included in a game's about screen."], "renpy.is_selected": ["internal", "function", "(action)", "", "", "Returns true if `action` indicates it is selected, or false otherwise."], "renpy.list_slots": ["internal", "function", "(regexp=None)", "", "", "Returns a list of non-empty save slots. If `regexp` exists, only slots that begin with `regexp` are returned. The slots are sorted in string-order."], "renpy.maximum_framerate": ["internal", "function", "(t)", "", "", "Forces Ren'Py to draw the screen at the maximum framerate for `t` seconds. If `t` is None, cancels the maximum framerate request."], "renpy.render": ["udd_utility", "renpy.render", "(d, width, height, st, at)", "", "function", "Causes a displayable to be rendered, and a renpy.Render object to be returned.\n\n`d` The displayable to render.\n\n`width`, `height` The width and height available for the displayable to render into.\n\n`st`, `at` The shown and animation timebases.\n\nRenders returned by this object may be cached, and should not be modified once they have been retrieved."], "renpy.map_event": ["internal", "function", "(ev, keysym)", "", "", "Returns true if the pygame event `ev` matches `keysym`\n\n`keysym` One of:\n\n* The name of a keybinding in :var:`config.keymap`. * A keysym, as documented in the :ref:`keymap` section. * A list containing one or more keysyms."], "renpy.start_predict_screen": ["internal", "function", "(_screen_name, *args, **kwargs)", "", "", "Causes Ren'Py to start predicting the screen named `_screen_name` with the given arguments. This replaces any previous prediction of `_screen_name`. To stop predicting a screen, call :func:`renpy.stop_predict_screen`."], "renpy.call_screen": ["internal", "function", "(_screen_name, *args, **kwargs)", "", "", "The programmatic equivalent of the call screen statement.\n\nThis shows `_screen_name` as a screen, then causes an interaction to occur. The screen is hidden at the end of the interaction, and the result of the interaction is returned.\n\nPositional arguments, and keyword arguments that do not begin with _ are passed to the screen.\n\nIf the keyword argument `_with_none` is false, \\with None\\ is not run at the end of end of the interaction.\n\nIf the keyword argument `_mode` in kwargs, it will be mode of this interaction, otherwise it will be \\screen\\ mode."], "renpy.has_screen": ["internal", "function", "(name)", "", "", "Returns true if a screen with the given name exists."], "renpy.Render.add_property": ["cdd", "add_property", "(name, value)", "renpy.Render", "method", "Causes the GL property `name` to have `value` when this Render or one of its children are drawn."], "renpy.eval_who": ["internal", "function", "(who, fast=None)", "", "", "Evaluates the `who` parameter to a say statement."], "renpy.set_tag_attributes": ["internal", "function", "(name, layer=None)", "", "", "This sets the attributes associated with an image tag when that image tag is not showing. The main use of this would be to directly set the attributes used by a side image.\n\nFor example::\n\n$ renpy.set_tag_attributes(\\lucy mad\\) $ renpy.say(l, \\I'm rather cross.\\)\n\nand::\n\nl mad \\I'm rather cross.\\\n\nare equivalent."], "renpy.mobile": ["other", "renpy.mobile", "", "", "var", "Has a true value when running on Android or iOS or in the browser."], "renpy.get_refresh_rate": ["internal", "function", "(precision=5)", "", "", "Returns the refresh rate of the current screen, as a floating-point number of frames per second.\n\n`precision` The raw data Ren'Py gets is number of frames per second, rounded down. This means that a monitor that runs at 59.95 frames per second will be reported at 59 fps. The precision argument reduces the precision of this reading, such that the only valid readings are multiples of the precision.\n\nSince all monitor framerates tend to be multiples of 5 (25, 30, 60, 75, and 120), this likely will improve accuracy. Setting precision to 1 disables this."], "renpy.flush_cache_file": ["internal", "function", "(fn)", "", "", "This flushes all image cache entries that refer to the file `fn`.  This may be called when an image file changes on disk to force Ren'Py to use the new version."], "renpy.scry": ["internal", "function", "(self)", "", "", "Returns the scry object for the current statement.\n\nThe scry object tells Ren'Py about things that must be true in the future of the current statement. Right now, the scry object has one field:\n\n``nvl_clear`` Is true if an ``nvl clear`` statement will execute before the next interaction."], "renpy.Render.get_size": ["cdd", "get_size", "()", "renpy.Render", "method", "Returns a (width, height) tuple giving the size of this render."], "renpy.stop_predict": ["internal", "function", "(*args)", "", "", "This function takes one or more displayables as arguments. It causes Ren'Py to stop predicting those displayables during every interaction.\n\nWildcard patterns can be used as described in :func:`renpy.start_predict`."], "renpy.free_memory": ["internal", "function", "()", "", "", "Attempts to free some memory. Useful before running a renpygame-based minigame."], "renpy.restart_interaction": ["internal", "function", "()", "", "", "Restarts the current interaction. Among other things, this displays images added to the scene, re-evaluates screens, and starts any queued transitions.\n\nThis only does anything when called from within an interaction (for example, from an action). Outside an interaction, this function has no effect."], "renpy.log": ["internal", "function", "(msg)", "", "", "If :var:`config.log` is not set, this does nothing. Otherwise, it opens the logfile (if not already open), formats the message to :var:`config.log_width` columns, and prints it to the logfile."], "renpy.music.is_playing": ["internal", "function", "(channel=\"music\")", "", "", "Returns True if the channel is currently playing a sound, False if it is not, or if the sound system isn't working."], "renpy.get_return_stack": ["internal", "function", "()", "", "", "Returns a list giving the current return stack. The return stack is a list of statement names.\n\nThe statement names will be strings (for labels), or opaque tuples (for non-label statements)."], "renpy.set_autoreload": ["internal", "function", "(autoreload)", "", "", "Sets the autoreload flag, which determines if the game will be automatically reloaded after file changes. Autoreload will not be fully enabled until the game is reloaded with :func:`renpy.utter_restart`."], "renpy.context_nesting_level": ["internal", "function", "()", "", "", "Returns the nesting level of the current context. This is 0 for the outermost context (the context that is saved, loaded, and rolled-back), and is non-zero in other contexts, such as menu and replay contexts."], "renpy.quit": ["internal", "function", "(relaunch=False, status=0, save=False)", "", "", "This causes Ren'Py to exit entirely.\n\n`relaunch` If true, Ren'Py will run a second copy of itself before quitting.\n\n`status` The status code Ren'Py will return to the operating system. Generally, 0 is success, and positive integers are failure.\n\n`save` If true, the game is saved in :var:`_quit_slot` before Ren'Py terminates."], "renpy.register_style_preference": ["internal", "function", "(preference, alternative, style, property, value)", "", "", "Registers information about an alternative for a style preference.\n\n`preference` A string, the name of the style preference.\n\n`alternative` A string, the name of the alternative.\n\n`style` The style that will be updated. This may be a style object or a string giving the style name.\n\n`property` A string giving the name of the style property that will be update.\n\n`value` The value that will be assigned to the style property."], "renpy.unlink_save": ["internal", "function", "(filename)", "", "", "Deletes the save slot with the given name."], "renpy.movie_stop": ["internal", "function", "(clear=True, only_fullscreen=False)", "", "", "Stops the currently playing movie."], "renpy.set_mouse_pos": ["internal", "function", "(x, y, duration=0)", "", "", "Jump the mouse pointer to the location given by arguments x and y. If the device does not have a mouse pointer, this does nothing.\n\n`duration` The time it will take to perform the move, in seconds. During this time, the mouse may be unresponsive."], "renpy.image_exists": ["internal", "function", "(name, expression, tag, precise=True)", "", "", "Checks a scene or show statement for image existence."], "renpy.loadable": ["internal", "function", "(filename)", "", "", "Returns True if the given filename is loadable, meaning that it can be loaded from the disk or from inside an archive. Returns False if this is not the case."], "renpy.block_rollback": ["internal", "function", "()", "", "", "Prevents the game from rolling back to before the current statement."], "renpy.version_tuple": ["other", "renpy.version_tuple", "", "", "var", "The version number of Ren'Py, as a tuple of the form (1, 2, 3, 456)."], "renpy.scene": ["internal", "function", "(layer='master')", "", "", "Removes all displayables from `layer`. This is equivalent to the scene statement, when the scene statement is not given an image to show.\n\nA full scene statement is equivalent to a call to renpy.scene followed by a call to :func:`renpy.show`. For example::\n\nscene bg beach\n\nis equivalent to::\n\n$ renpy.scene() $ renpy.show(\\bg beach\\)"], "renpy.Displayable.visit": ["cdd", "visit", "(self)", "renpy.Displayable", "method", "If the displayable has child displayables, this method should be overridden to return a list of those displayables. This ensures that the per_interact methods of those displayables are called, and also allows images used by those displayables to be predicted."], "renpy.sound.play": ["internal", "function", "(filenames, channel=\"sound\", loop=None, fadeout=None, synchro_start=False, fadein=0, tight=None, if_changed=False, relative_volume=1.0)", "", "", "This stops the music currently playing on the numbered channel, dequeues any queued music, and begins playing the specified file or files.\n\n`filenames` This may be a single file, or a list of files to be played.\n\n`channel` The channel to play the sound on.\n\n`loop` If this is True, the tracks will loop while they are the last thing in the queue.\n\n`fadeout` If not None, this is a time in seconds to fade for. Otherwise the fadeout time is taken from config.fade_music.\n\n`synchro_start` Ren'Py will ensure that all channels of with synchro_start set to true will start playing at exactly the same time. Synchro_start should be true when playing two audio files that are meant to be synchronized with each other.\n\n`fadein` This is the number of seconds to fade the music in for, on the first loop only.\n\n`tight` If this is True, then fadeouts will span into the next-queued sound. If None, this is true when loop is True, and false otherwise.\n\n`if_changed` If this is True, and the music file is currently playing, then it will not be stopped/faded out and faded back in again, but instead will be kept playing. (This will always queue up an additional loop of the music.)\n\n`relative_volume` This is the volume relative to the current channel volume. The specified file will be played at that relative volume. If not specified, it will always default to 1.0, which plays the file at the original volume as determined by the mixer, channel and secondary volume.\n\nThis clears the pause flag for `channel`."], "renpy.get_available_image_tags": ["internal", "function", "()", "", "", "Returns a list of image tags that have been defined."], "renpy.get_displayable_properties": ["internal", "function", "(id, screen=None, layer=None)", "", "", "Returns the properties for the displayable with `id` in the `screen` on `layer`. If `screen` is None, returns the properties for the current screen. This can be used from Python or property code inside a screen.\n\nNote that this returns a dictionary containing the widget properties, and so to get an individual property, the dictionary must be accessed."], "renpy.request_permission": ["internal", "function", "(permission)", "", "", "Asks Android to grant a permission to this application. The user may be prompted to grant the permission.\n\n`permission` A string giving the name of the permission, for example, \\android.permission.WRITE_EXTERNAL_STORAGE\\.\n\nReturns true if the permission has been granted, false if not or if called on a non-Android platform."], "renpy.fsencode": ["internal", "function", "(s)", "", "", "Converts s from unicode to the filesystem encoding."], "renpy.music.get_pos": ["internal", "function", "(channel=\"music\")", "", "", "Returns the current position of the audio or video file on `channel`, in seconds. Returns None if no audio is playing on `channel`.\n\nAs this may return None before a channel starts playing, or if the audio channel involved has been muted, callers of this function should always handle a None value."], "renpy.mark_image_seen": ["internal", "function", "(name)", "", "", "Marks the named image as if it has been already displayed on the current user's system."], "renpy.return_statement": ["internal", "function", "(value=None)", "", "", "Causes Ren'Py to return from the current Ren'Py-level call."], "renpy.android": ["other", "renpy.android", "", "", "var", "Has a true value when running on Android."], "renpy.call_stack_depth": ["internal", "function", "()", "", "", "Returns the depth of the call stack of the current context - the number of calls that have run without being returned from or popped from the call stack."], "renpy.rollback": ["internal", "function", "(force=False, checkpoints=1, defer=False, greedy=True, label=None, abnormal=True)", "", "", "Rolls the state of the game back to the last checkpoint.\n\n`force` If true, the rollback will occur in all circumstances. Otherwise, the rollback will only occur if rollback is enabled in the store, context, and config.\n\n`checkpoints` Ren'Py will roll back through this many calls to renpy.checkpoint. It will roll back as far as it can, subject to this condition.\n\n`defer` If true, the call will be deferred until control returns to the main context.\n\n`greedy` If true, rollback will finish just after the previous checkpoint. If false, rollback finish just before the current checkpoint.\n\n`label` If not None, a label that is called when rollback completes.\n\n`abnormal` If true, the default, script executed after the transition is run in an abnormal mode that skips transitions that would have otherwise occured. Abnormal mode ends when an interaction begins."], "renpy.version_only": ["other", "renpy.version_only", "", "", "var", "The version number of Ren'Py, without the Ren'Py prefix. A string of the form \\1.2.3.456\\."], "renpy.get_image_bounds": ["internal", "function", "(tag, width=None, height=None, layer=None)", "", "", "If an image with `tag` exists on `layer`, returns the bounding box of that image. Returns None if the image is not found.\n\nThe bounding box is an (x, y, width, height) tuple. The components of the tuples are expressed in pixels, and may be floating point numbers.\n\n`width`, `height` The width and height of the area that contains the image. If None, defaults the width and height of the screen, respectively.\n\n`layer` If None, uses the default layer for `tag`."], "renpy.sound": ["basefile", "", "", "", "", "Most renpy.sound functions have aliases in renpy.music. These functions are similar, except they default to the music channel rather than the sound channel, and default to looping."], "renpy.quit_event": ["internal", "function", "()", "", "", "Triggers a quit event, as if the player clicked the quit button in the window chrome."], "renpy.screenshot_to_bytes": ["internal", "function", "(size)", "", "", "Returns a screenshot as a bytes object, that can be passed to im.Data(). The bytes will be a png-format image, such that\n```\n$ data = renpy.screenshot_to_bytes((640, 360))\nshow expression im.Data(data, \\screenshot.png\\):\nalign (0, 0)\n\nWill show the image. The bytes objects returned can be stored in save\nfiles and persistent data. However, these may be large, and care should\nbe taken to not include too many.\n\n`size`\nThe size the screenshot will be resized to. If None, the screenshot\nwill be resized, and hence will be the size of the player's window,\nwithout any letterbars.\n\nThis function may be slow, and so it's intended for save-like screenshots,\nand not realtime effects.\n```"], "renpy.check_permission": ["internal", "function", "(permission)", "", "", "Checks to see if an Android permission has been granted to this application.\n\n`permission` A string giving the name of the permission, for example, \\android.permission.WRITE_EXTERNAL_STORAGE\\.\n\nReturns true if the permission has been granted, false if it has not or if called on a non-Android platform."], "renpy.showing": ["internal", "function", "(layer, name, exact=False)", "", "", "Returns true if an image with the same tag as `name` is showing on `layer`.\n\n`image` May be a string giving the image name or a tuple giving each component of the image name. It may also be a string giving only the image tag.\n\n`layer` The layer to check. If None, uses the default layer for `tag`."], "renpy.sound.set_pause": ["internal", "function", "(value, channel=\"sound\")", "", "", "Sets the pause flag for `channel` to `value`. If True, the channel will pause, otherwise it will play normally."], "renpy.macintosh": ["other", "renpy.macintosh", "", "", "var", "Has a true value when running on macOS."], "renpy.show_layer_at": ["internal", "function", "(at_list, layer='master', reset=True, camera=False)", "", "", "The Python equivalent of the ``show layer`` `layer` ``at`` `at_list` statement. If `camera` is True, the equivalent of the ``camera`` statement.\n\n`reset` If true, the transform state is reset to the start when it is shown. If false, the transform state is persisted, allowing the new transform to update that state."], "renpy.copy_images": ["internal", "function", "(old, new)", "", "", "Copies images beginning with one prefix to images beginning with another. For example\n```\nrenpy.copy_images(\\eileen\\, \\eileen2\\)\n\nwill create an image beginning with \\eileen2\\ for every image beginning\nwith \\eileen\\. If \\eileen happy\\ exists, \\eileen2 happy\\ will be\ncreated.\n\n`old`\nA space-separated string giving the components of the old image\nname.\n\n`new`\nA space-separated string giving the components of the new image\nname.\n\n```"], "renpy.dynamic": ["internal", "function", "(*vars, **kwargs)", "", "", "This can be given one or more variable names as arguments. This makes the variables dynamically scoped to the current call. The variables will be reset to their original value when the call returns.\n\nIf the variables are given as keyword arguments, the value of the argument is assigned to the variable name.\n\nExample calls are\n```\n$ renpy.dynamic(\\x\\, \\y\\, \\z\\)\n$ renpy.dynamic(players=2, score=0)\n```"], "renpy.get_adjustment": ["internal", "function", "(bar_value)", "", "", "Given `bar_value`, a  :class:`BarValue`, returns the :func:`ui.adjustment` if uses. The adjustment has the following to attributes defined:\n\n.. attribute:: value\n\nThe current value of the bar.\n\n.. attribute:: range\n\nThe current range of the bar."], "renpy.set_return_stack": ["internal", "function", "(stack)", "", "", "Sets the current return stack. The return stack is a list of statement names.\n\nStatement names may be strings (for labels) or opaque tuples (for non-label statements)."], "renpy.set_physical_size": ["internal", "function", "(size)", "", "", "Attempts to set the size of the physical window to `size`. This has the side effect of taking the screen out of fullscreen mode."], "renpy.music.set_volume": ["internal", "function", "(volume, delay=0, channel=\"music\")", "", "", "Sets the volume of this channel, as a fraction of the volume of the mixer controlling the channel.\n\n`volume` This is a number between 0.0 and 1.0, and is interpreted as a fraction of the mixer volume for the channel.\n\n`delay` It takes delay seconds to change/fade the volume from the old to the new value. This value is persisted into saves, and participates in rollback.\n\n`channel` The channel to be set"], "renpy.queue_event": ["internal", "function", "(name, up=False, **kwargs)", "", "", "Queues an event with the given name. `Name` should be one of the event names in :var:`config.keymap`, or a list of such names.\n\n`up` This should be false when the event begins (for example, when a keyboard button is pressed.) It should be true when the event ends (when the button is released.)\n\nThe event is queued at the time this function is called. This function will not work to replace an event with another - doing so will change event order. (Use :var:`config.keymap` instead.)\n\nThis method is threadsafe."], "renpy.load_module": ["internal", "function", "(name, **kwargs)", "", "", "This loads the Ren'Py module named name. A Ren'Py module consists of Ren'Py script that is loaded into the usual (store) namespace, contained in a file named name.rpym or name.rpymc. If a .rpym file exists, and is newer than the corresponding .rpymc file, it is loaded and a new .rpymc file is created.\n\nAll of the init blocks (and other init-phase code) in the module are run before this function returns. An error is raised if the module name cannot be found, or is ambiguous.\n\nModule loading may only occur from inside an init block."], "renpy.mode": ["internal", "function", "(mode)", "", "", "Causes Ren'Py to enter the named mode, or stay in that mode if it's already in it."], "renpy.suspend_rollback": ["internal", "function", "(flag)", "", "", "Rollback will skip sections of the game where rollback has been suspended.\n\n`flag`: When `flag` is true, rollback is suspended. When false, rollback is resumed."], "renpy.get_mouse_pos": ["internal", "function", "()", "", "", "Returns an (x, y) tuple giving the location of the mouse pointer or the current touch location. If the device does not support a mouse and is not currently being touched, x and y are numbers, but not meaningful."], "renpy.run": ["internal", "function", "(action)", "", "", "Run an action or list of actions. A single action is called with no arguments, a list of actions is run in order using this function, and None is ignored.\n\nReturns the result of the last action to return a value."], "renpy.version_name": ["other", "renpy.version_name", "", "", "var", "A human readable version name, of the form \\Example Version.\\"], "renpy.pause": ["internal", "function", "(delay=None, hard=False)", "", "", "Causes Ren'Py to pause. Returns true if the user clicked to end the pause, or false if the pause timed out or was skipped.\n\n`delay` If given, the number of seconds Ren'Py should pause for.\n\n`hard` This must be given as a keyword argument. When True, Ren'Py may prevent the user from clicking to interrupt the pause. If the player enables skipping, the hard pause will be skipped. There may be other circumstances where the hard pause ends early or prevents Ren'Py from operating properly, these will not be treated as bugs.\n\nIn general, using hard pauses is rude. When the user clicks to advance the game, it's an explicit request - the user wishes the game to advance. To override that request is to assume you understand what the player wants more than the player does.\n\nCalling renpy.pause guarantees that whatever is on the screen will be displayed for at least one frame, and hence has been shown to the player.\n\ntl;dr - Don't use renpy.pause with hard=True."], "renpy.add_layer": ["internal", "function", "(layer, above=None, below=None, menu_clear=True)", "", "", "Adds a new layer to the screen. If the layer already exists, this function does nothing.\n\nOne of `behind` or `above` must be given.\n\n`layer` A string giving the name of the new layer to add.\n\n`above` If not None, a string giving the name of a layer the new layer will be placed above.\n\n`below` If not None, a string giving the name of a layer the new layer will be placed below.\n\n`menu_clear` If true, this layer will be cleared when entering the game menu context, and restored when leaving the"], "renpy.variant": ["internal", "function", "(name)", "", "", "Returns true if a `name` is a screen variant that can be chosen by Ren'Py. See :ref:`screen-variants` for more details. This function can be used as the condition in a Python if statement to set up the appropriate styles for the selected screen variant.\n\n`name` can also be a list of variants, in which case this function returns True if any of the variants is selected."], "renpy.invoke_in_thread": ["internal", "function", "(fn, *args, **kwargs)", "", "", "Invokes the function `fn` in a background thread, passing it the provided arguments and keyword arguments. Restarts the interaction once the thread returns.\n\nThis function creates a daemon thread, which will be automatically stopped when Ren'Py is shutting down.\n\nThis thread is very limited in what it can do with the Ren'Py API. Changing store variables is allowed, as is calling the :func:`renpy.queue_event` function. Most other portions of the Ren'Py API are expected to be called from the main thread.\n\nThe primary use of this function is to place accesss to a web API in a second thread, and then update variables with the results of that call, by storing the result in variables and then relying on the interaction restart to cause screens to display those variables."], "renpy.predict_screen": ["internal", "function", "(_screen_name, *_args, **kwargs)", "", "", "Predicts the displayables that make up the given screen.\n\n`_screen_name` The name of the  screen to show. `_widget_properties` A map from the id of a widget to a property name -> property value map. When a widget with that id is shown by the screen, the specified properties are added to it.\n\nKeyword arguments not beginning with underscore (_) are used to initialize the screen's scope."], "renpy.sound.stop": ["internal", "function", "(channel=\"sound\", fadeout=None)", "", "", "This stops the music that is currently playing, and dequeues all queued music. If fadeout is None, the music is faded out for the time given in config.fade_music, otherwise it is faded for fadeout seconds.\n\nThis sets the last queued file to None.\n\n`channel` The channel to stop the sound on.\n\n`fadeout` If not None, this is a time in seconds to fade for. Otherwise the fadeout time is taken from config.fade_music."], "renpy.choice_for_skipping": ["internal", "function", "()", "", "", "Tells Ren'Py that a choice is coming up soon. This currently has two effects:\n\n* If Ren'Py is skipping, and the Skip After Choices preferences is set   to stop skipping, skipping is terminated.\n\n* An auto-save is triggered."], "renpy.in_fixed_rollback": ["internal", "function", "()", "", "", "Returns true if rollback is currently occurring and the current context is before an executed renpy.fix_rollback() statement."], "renpy.sound.queue": ["internal", "function", "(filenames, channel=\"sound\", loop=None, clear_queue=True, fadein=0, tight=None, relative_volume=1.0)", "", "", "This queues the given filenames on the specified channel.\n\n`filenames` This may be a single file, or a list of files to be played.\n\n`channel` The channel to play the sound on.\n\n`loop` If this is True, the tracks will loop while they are the last thing in the queue.\n\n`clear_queue` If True, then the queue is cleared, making these files the files that are played when the currently playing file finishes. If it is False, then these files are placed at the back of the queue. In either case, if no music is playing these files begin playing immediately.\n\n`fadein` This is the number of seconds to fade the music in for, on the first loop only.\n\n`tight` If this is True, then fadeouts will span into the next-queued sound. If None, this is true when loop is True, and false otherwise.\n\n`relative_volume` This is the volume relative to the current channel volume. The specified file will be played at that relative volume. If not specified, it will always default to 1.0, which plays the file at the original volume as determined by the mixer, channel and secondary volume.\n\nThis clears the pause flag for `channel`."], "renpy.hide_screen": ["internal", "function", "(tag, layer=None)", "", "", "The programmatic equivalent of the hide screen statement.\n\nHides the screen with `tag` on `layer`."], "renpy.Render.place": ["cdd", "place", "(d, x=0, y=0, width=None, height=None, st=None, at=None, render=None, main=True)", "renpy.Render", "method", "Renders `d` and places it into the rectangle defined by the `x`, `y`, `width`, and `height`, using Ren'Py's standard placement algorithm.\n\n`x`, `y`, `width`, `height` The rectangle to place in. If `width` or `height`, when None, are the width and height of this render, respectively.\n\n`st`, `at` The times passed to Render. If None, defaults to the times passed to the render method calling this method.\n\n`render` If not None, this is used instead of rendering `d`.\n\n`main` As for .blit()."], "renpy.music.stop": ["internal", "function", "(channel=\"music\", fadeout=None)", "", "", "This stops the music that is currently playing, and dequeues all queued music. If fadeout is None, the music is faded out for the time given in config.fade_music, otherwise it is faded for fadeout seconds.\n\nThis sets the last queued file to None.\n\n`channel` The channel to stop the sound on.\n\n`fadeout` If not None, this is a time in seconds to fade for. Otherwise the fadeout time is taken from config.fade_music."], "renpy.copy_save": ["internal", "function", "(old, new)", "", "", "Copies the save at `old` to `new`. (Does nothing if `old` does not exist.)"], "renpy.get_renderer_info": ["internal", "function", "()", "", "", "Returns a dictionary, giving information about the renderer Ren'Py is currently using. Defined keys are:\n\n``\\renderer\\`` A string giving the name of the renderer that is in use.\n\n``\\resizable\\`` True if and only if the window is resizable.\n\n``\\additive\\`` True if and only if the renderer supports additive blending.\n\n``\\model\\`` Present and true if model-based rendering is supported.\n\nOther, renderer-specific, keys may also exist. The dictionary should be treated as immutable. This should only be called once the display has been started (that is, after the init phase has finished)."], "renpy.sound.set_pan": ["internal", "function", "(pan, delay, channel=\"sound\")", "", "", "Sets the pan of this channel.\n\n`pan` A number between -1 and 1 that control the placement of the audio. If this is -1, then all audio is sent to the left channel. If it's 0, then the two channels are equally balanced. If it's 1, then all audio is sent to the right ear.\n\n`delay` The amount of time it takes for the panning to occur.\n\n`channel` The channel the panning takes place on. This can be a sound or a music channel. Often, this is channel 7, the default music channel."], "renpy.end_replay": ["internal", "function", "()", "", "", "If we're in a replay, ends the replay immediately. Otherwise, does nothing."], "renpy.exists": ["internal", "function", "(filename)", "", "", "Returns true if the given filename can be found in the searchpath. This only works if a physical file exists on disk. It won't find the file if it's inside of an archive.\n\nYou almost certainly want to use :func:`renpy.loadable` in preference to this function."], "renpy.play": ["internal", "function", "(filename, channel=None, **kwargs)", "", "", "Plays a sound effect. If `channel` is None, it defaults to :var:`config.play_channel`. This is used to play sounds defined in styles, :propref:`hover_sound` and :propref:`activate_sound`."], "renpy.end_interaction": ["internal", "function", "(value)", "", "", "If `value` is not None, immediately ends the current interaction, causing the interaction to return `value`. If `value` is None, does nothing.\n\nThis can be called from inside the render and event methods of a creator-defined displayable."], "renpy.get_hidden_tags": ["internal", "function", "(layer)", "", "", "Returns the set of image tags on `layer` that are currently hidden, but still have attribute information associated with them."], "renpy.get_all_labels": ["internal", "function", "()", "", "", "Returns the set of all labels defined in the program, including labels defined for internal use in the libraries."], "renpy.mark_audio_unseen": ["internal", "function", "(filename)", "", "", "Marks the given filename as if it has not been played on the current user's system yet."], "renpy.cancel_gesture": ["internal", "function", "()", "", "", "Cancels the current gesture, preventing the gesture from being recognized. This should be called by displayables that have gesture-like behavior."], "renpy.has_live2d": ["internal", "function", "()", "", "", "Returns True if Live2d is supported on the current platform, and False otherwise."], "renpy.stop_predict_screen": ["internal", "function", "(name)", "", "", "Causes Ren'Py to stop predicting the screen named `name`."], "renpy.music.get_loop": ["internal", "function", "(channel=\"music\")", "", "", "Return a list of filenames that are being looped on `channel`, or None if no files are being looped. In the case where a loop is queued, but is not yet playing, the loop is returned, not the currently playing music."], "renpy.get_showing_tags": ["internal", "function", "(layer)", "", "", "Returns the set of image tags that are currently being shown on `layer`. If sort is true, returns a list of the tags from back to front."], "renpy.newest_slot": ["internal", "function", "(regexp=None)", "", "", "Returns the name of the newest save slot (the save slot with the most recent modification time), or None if there are no (matching) saves.\n\nIf `regexp` exists, only slots that begin with `regexp` are returned."], "renpy.get_sdl_window_pointer": ["internal", "function", "()", "", "", "Returns a pointer (of type ctypes.c_void_p) to the main window, or None if the main window is not displayed, or some other problem occurs."], "renpy.music": ["basefile", "", "", "", "", "Most renpy.music functions have aliases in renpy.sound. These functions are similar, except they default to the sound channel rather than the music channel, and default to not looping."], "renpy.is_seen": ["internal", "function", "(ever=True)", "", "", "Returns true if the current line has been seen by the player.\n\nIf `ever` is true, we check to see if the line has ever been seen by the player. If false, we check if the line has been seen in the current play-through."], "renpy.get_say_image_tag": ["internal", "function", "()", "", "", "Returns the tag corresponding to the currently speaking character (the `image` argument given to that character). Returns None if no character is speaking or the current speaking character does not have a corresponding image tag."], "renpy.substitute": ["internal", "function", "(s, scope=None, translate=True)", "", "", "Applies translation and new-style formatting to the string `s`.\n\n`scope` If not None, a scope which is used in formatting, in addition to the default store.\n\n`translate` Determines if translation occurs.\n\nReturns the translated and formatted string."], "renpy.get_screen": ["internal", "function", "(name, layer=None)", "", "", "Returns the ScreenDisplayable with the given `name` on layer. `name` is first interpreted as a tag name, and then a screen name. If the screen is not showing, returns None.\n\nThis can also take a list of names, in which case the first screen that is showing is returned.\n\nThis function can be used to check if a screen is showing\n```\nif renpy.get_screen(\\say\\):\ntext \\The say screen is showing.\\\nelse:\ntext \\The say screen is hidden.\\\n\n```"], "renpy.is_skipping": ["internal", "function", "()", "", "", "Returns True if Ren'Py is currently skipping (in fast or slow skip mode), or False otherwise."], "renpy.check_image_attributes": ["internal", "function", "(tag, attributes)", "", "", "Checks to see if there is a unique image with the given tag and attributes. If there is, returns the attributes in order. Otherwise, returns None."], "renpy.fsdecode": ["internal", "function", "(s)", "", "", "Converts s from filesystem encoding to unicode."], "renpy.load_image": ["internal", "function", "(im)", "", "", "Loads the image manipulator `im` using the image cache, and returns a render."], "renpy.take_screenshot": ["internal", "function", "(scale=None, background=False)", "", "", "Causes a screenshot to be taken. This screenshot will be saved as part of a save game."], "renpy.register_sl_statement": ["internal", "class", "(name, children=u'many', screen=None)", "", "", "Registers a custom screen language statement with Ren'Py.\n\n`name` This must be a word. It's the name of the custom screen language statement.\n\n`children` The number of children this custom statement takes. This should be 0, 1, or \\many\\, which means zero or more.\n\n`screen` The screen to use. If not given, defaults to `name`.\n\nReturns an object that can have positional arguments and properties added to it. This object has the same .add_ methods as the objects returned by :class:`renpy.register_sl_displayable`."], "renpy.input": ["internal", "function", "(prompt, default='', allow=None, exclude='{}', length=None, with_none=None, pixel_width=None, screen=\"input\", mask=None, **kwargs)", "", "", "Calling this function pops up a window asking the player to enter some text. It returns the entered text.\n\n`prompt` A string giving a prompt to display to the player.\n\n`default` A string giving the initial text that will be edited by the player.\n\n`allow` If not None, a string giving a list of characters that will be allowed in the text.\n\n`exclude` If not None, if a character is present in this string, it is not allowed in the text.\n\n`length` If not None, this must be an integer giving the maximum length of the input string.\n\n`pixel_width` If not None, the input is limited to being this many pixels wide, in the font used by the input to display text.\n\n`screen` The name of the screen that takes input. If not given, the ``input`` screen is used.\n\n`mask` If not None, a single-character string that replaces the input text that is shown to the player, such as to conceal a password.\n\nIf :var:`config.disable_input` is True, this function only returns `default`.\n\nKeywords prefixed with ``show_`` have the prefix stripped and are passed to the screen."], "renpy.get_say_attributes": ["internal", "function", "()", "", "", "Gets the attributes associated with the current say statement, or None if no attributes are associated with this statement.\n\nThis is only valid when executing or predicting a say statement."], "renpy.define_screen": ["internal", "function", "(name, function, modal=\"False\", zorder=\"0\", tag=None, variant=None)", "", "", "Defines a screen with `name`, which should be a string.\n\n`function` The function that is called to display the screen. The function is called with the screen scope as keyword arguments. It should ignore additional keyword arguments.\n\nThe function should call the ui functions to add things to the screen.\n\n`modal` A string that, when evaluated, determines of the created screen should be modal. A modal screen prevents screens underneath it from receiving input events.\n\n`zorder` A string that, when evaluated, should be an integer. The integer controls the order in which screens are displayed. A screen with a greater zorder number is displayed above screens with a lesser zorder number.\n\n`tag` The tag associated with this screen. When the screen is shown, it replaces any other screen with the same tag. The tag defaults to the name of the screen.\n\n`predict` If true, this screen can be loaded for image prediction. If false, it can't. Defaults to true.\n\n`variant` String. Gives the variant of the screen to use."], "renpy.music_stop": ["internal", "function", "(fadeout=None)", "", "", "Deprecated music start function, retained for compatibility. Use renpy.music.play() or .queue() instead."], "renpy.clear_game_runtime": ["internal", "function", "()", "", "", "Resets the game runtime counter."], "renpy.jump": ["internal", "function", "(label)", "", "", "Causes the current statement to end, and control to jump to the given label."], "renpy.Displayable.event": ["cdd", "event", "(ev, x, y, st)", "renpy.Displayable", "method", "The event method is called to pass a pygame event to the creator-defined displayable. If the event method returns a value other than None, that value is returned as the result of the interaction. If the event method returns None, the event is passed on to other displayables.\n\nTo ignore the event without returning None, raise :class:`renpy.IgnoreEvent`.\n\nThe event method exists on other displayables, allowing the creator-defined displayable to pass on the event.\n\n`ev` An `event object <http://www.pygame.org/docs/ref/event.html>`_\n\n`x`, `y` The x and y coordinates of the event, relative to the upper-left corner of the displayable. These should be used in preference to position information found in the pygame event objects.\n\n`st` A float, the shown timebase, in seconds.\n\nAn event is generated at the start of each interaction, and :func:`renpy.timeout` can be used to cause another event to occur."], "renpy.start_predict": ["internal", "function", "(*args)", "", "", "This function takes one or more displayables as arguments. It causes Ren'Py to predict those displayables during every interaction until the displayables are removed by :func:`renpy.stop_predict`.\n\nIf a displayable name is a string containing one or more \\\\* characters, the asterisks are used as a wildcard pattern. If there is at least one . in the string, the pattern is matched against filenames, otherwise it is matched against image names.\n\nFor example::\n\n$ renpy.start_predict(\\eileen *\\)\n\nstarts predicting all images with the name eileen, while::\n\n$ renpy.start_predict(\\images/concert*.*\\)\n\nmatches all files starting with concert in the images directory."], "renpy.reload_script": ["internal", "function", "()", "", "", "Causes Ren'Py to save the game, reload the script, and then load the save."], "renpy.types": ["internal", "function", "()", "", "", "Define names for all type symbols known in the standard interpreter.\n\nTypes that are part of optional modules (e.g. array) are not listed."], "renpy.Displayable.per_interact": ["cdd", "per_interact", "(self)", "renpy.Displayable", "method", "This method is called at the start of each interaction. It can be used to trigger a redraw, and probably should be used to trigger a redraw if the object participates in rollback."], "renpy.load_surface": ["internal", "function", "(im)", "", "", "Loads the image manipulator `im` using the image cache, and returns a pygame Surface."], "renpy.music.get_duration": ["internal", "function", "(channel=\"music\")", "", "", "Returns the duration of the audio or video file on `channel`. Returns 0.0 if no file is playing on `channel`."], "renpy.can_load": ["internal", "function", "(filename, test=False)", "", "", "Returns true if `filename` exists as a save slot, and False otherwise."], "renpy.pop_call": ["internal", "function", "()", "", "", "Pops the current call from the call stack, without returning to the location.\n\nThis can be used if a label that is called decides not to return to its caller."], "renpy.run_unhovered": ["internal", "function", "(var)", "", "", "Calls the unhovered method on the variable, if it exists."], "renpy.redraw": ["cdd", "renpy.redraw", "(d, when)", "", "function", "Causes the displayable `d` to be redrawn after `when` seconds have elapsed."], "renpy.Render.zoom": ["cdd", "zoom", "(xzoom, yzoom)", "renpy.Render", "method", "Sets the zoom level of the children of this displayable in the horitzontal and vertical axes. Only the children of the displayable are zoomed \u2013 the width, height, and blit coordinates are not zoomed.\n\nThe following attributes and methods are only used when model-based rendering is enabled:"], "renpy.count_newly_seen_dialogue_blocks": ["internal", "function", "()", "", "", "Returns the number of dialogue blocks the user has seen for the first time during this session."], "renpy.register_shader": ["internal", "function", "(name, **kwargs)", "", "", "This registers a shader part. This takes `name`, and then keyword arguments.\n\n`name` A string giving the name of the shader part. Names starting with an underscore or \\renpy.\\ are reserved for Ren'Py.\n\n`variables` The variables used by the shader part. These should be listed one per line, a storage (uniform, attribute, or varying) followed by a type, name, and semicolon. For example\n```\nvariables='''\nuniform sampler2D tex0;\nattribute vec2 a_tex_coord;\nvarying vec2 v_tex_coord;\n'''\n\n`vertex_functions`\nIf given, a string containing functions that will be included in the\nvertex shader.\n\n`fragment_functions`\nIf given, a string containing functions that will be included in the\nfragment shader.\n\nOther keyword arguments should start with ``vertex_`` or ``fragment_``,\nand end with an integer priority. So \\fragment_200\\ or \\vertex_300\\. These\ngive text that's placed in the appropriate shader at the given priority,\nwith lower priority numbers inserted before higher priority numbers.\n```"], "renpy.iconify": ["internal", "function", "()", "", "", "Iconifies the game."], "renpy.is_sensitive": ["internal", "function", "(action)", "", "", "Returns true if `action` indicates it is sensitive, or False otherwise."], "renpy.is_mouse_visible": ["internal", "function", "()", "", "", "Returns True if the mouse cursor is visible, False otherwise."], "renpy.sound.get_pause": ["internal", "function", "(channel=\"sound\")", "", "", "Returns the pause flag for `channel`."], "renpy.get_displayable": ["internal", "function", "(screen, id, layer=None, base=False)", "", "", "From the `screen` on `layer`, returns the displayable with `id`. Returns None if the screen doesn't exist, or there is no widget with that id on the screen."], "renpy.file": ["internal", "function", "(fn)", "", "", "Returns a read-only file-like object that accesses the file named `fn`. The file is accessed using Ren'Py's standard search method, and may reside in an RPA archive. or as an Android asset.\n\nThe object supports a wide subset of the fields and methods found on Python's standard file object, opened in binary mode. (Basically, all of the methods that are sensible for a read-only file.)"], "renpy.slot_json": ["internal", "function", "(slotname)", "", "", "Returns the json information for `slotname`, or None if the slot is empty."], "renpy.sound.set_queue_empty_callback": ["internal", "function", "(callback, channel=\"sound\")", "", "", "This sets a callback that is called when the queue is empty. This callback is called when the queue first becomes empty, and at least once per interaction while the queue is empty.\n\nThe callback is called with no parameters. It can queue sounds by calling renpy.music.queue with the appropriate arguments. Please note that the callback may be called while a sound is playing, as long as a queue slot is empty."], "renpy.sound.get_playing": ["internal", "function", "(channel=\"sound\")", "", "", "If the given channel is playing, returns the playing file name. Otherwise, returns None."], "renpy.predict": ["internal", "function", "(self)", "", "", "This is called to predictively load images from this node. It should cause renpy.display.predict.displayable and renpy.display.predict.screen to be called as necessary."], "renpy.checkpoint": ["internal", "function", "(data=None)", "", "", "Makes the current statement a checkpoint that the user can rollback to. Once this function has been called, there should be no more interaction with the user in the current statement.\n\nThis will also clear the current screenshot used by saved games.\n\n`data` This data is returned by :func:`renpy.roll_forward_info` when the game is being rolled back.\n\n`hard` If true, this is a hard checkpoint that rollback will stop at. If false, this is a soft checkpoint that will not stop rollback."], "renpy.music.set_pause": ["internal", "function", "(value, channel=\"music\")", "", "", "Sets the pause flag for `channel` to `value`. If True, the channel will pause, otherwise it will play normally."], "renpy.vibrate": ["internal", "function", "(duration)", "", "", "Causes the device to vibrate for `duration` seconds. Currently, this is only supported on Android."], "renpy.change_zorder": ["internal", "function", "(layer, tag, zorder)", "", "", "Changes the zorder of `tag` on `layer` to `zorder`."], "renpy.can_rollback": ["internal", "function", "()", "", "", "Returns true if we can rollback."], "renpy.Displayable.__init__": ["cdd", "__init__", "(**properties)", "renpy.Displayable", "method", "A subclass may override the constructor, perhaps adding new parameters. If it does, it should pass all unknown keyword arguments to the renpy.Displayable constructor, with the call\n```\nsuper(MyDisplayable, self).__init__(**properties)\n\n```"], "renpy.Render.add_shader": ["cdd", "add_shader", "(shader)", "renpy.Render", "method", "This causes the shader part `shader` to be used when this Render or its children are drawn. The part should be a string, or can be a string beginning with \\-\\ to prevent a shader from being drawn."], "renpy.fix_rollback": ["internal", "function", "()", "", "", "Prevents the user from changing decisions made before the current statement."], "renpy.Keymap": ["internal", "class", "(replaces=None, activate_sound=None, **keymap)", "", "", "This is a behavior that maps keys to actions that are called when the key is pressed. The keys are specified by giving the appropriate k_constant from pygame.constants, or the unicode for the key."], "renpy.save": ["internal", "function", "(filename, extra_info='')", "", "", "Saves the list of shaders to the file."], "renpy.Render.blit": ["cdd", "blit", "(source, pos, main=True)", "renpy.Render", "method", "Draws another render object into this render object.\n\n`source` The render object to draw.\n\n`pos` The location to draw into. This is an (x, y) tuple with the coordinates being pixels relative to the upper-left corner of the target render.\n\n`main` A keyword-only parameter. If true, `source` will be displayed in the style inspector."], "renpy.notify": ["internal", "function", "(message)", "", "", "Causes Ren'Py to display the `message` using the notify screen. By default, this will cause the message to be dissolved in, displayed for two seconds, and dissolved out again.\n\nThis is useful for actions that otherwise wouldn't produce feedback, like screenshots or quicksaves.\n\nOnly one notification is displayed at a time. If a second notification is displayed, the first notification is replaced.\n\nThis function just calls :var:`config.notify`, allowing its implementation to be replaced by assigning a new function to that variable."], "renpy.get_zorder_list": ["internal", "function", "(layer)", "", "", "Returns a list of (tag, zorder) pairs for `layer`."], "renpy.windows": ["other", "renpy.windows", "", "", "var", "Has a true value when running on Windows."], "renpy.music.set_queue_empty_callback": ["internal", "function", "(callback, channel=\"music\")", "", "", "This sets a callback that is called when the queue is empty. This callback is called when the queue first becomes empty, and at least once per interaction while the queue is empty.\n\nThe callback is called with no parameters. It can queue sounds by calling renpy.music.queue with the appropriate arguments. Please note that the callback may be called while a sound is playing, as long as a queue slot is empty."], "renpy.Displayable.render": ["cdd", "render", "(width, height, st, at)", "renpy.Displayable", "method", "Subclasses must override this, to return a :class:`renpy.Render` object. The render object determines what, if anything, is shown on the screen.\n\n`width`, `height` The amount of space available to this displayable, in pixels.\n\n`st` A float, the shown timebase, in seconds. The shown timebase begins when this displayable is first shown on the screen.\n\n`at` A float, the animation timebase, in seconds. The animation timebase begins when an image with the same tag was shown, without being hidden. (When the displayable is shown without a tag, this is the same as the shown timebase.)\n\nThe render method is called when the displayable is first shown. It can be called again if :func:`renpy.redraw` is called on this object."], "renpy.lint": ["internal", "function", "()", "", "", "The master lint function, that's responsible for staging all of the other checks."], "renpy.get_game_runtime": ["internal", "function", "()", "", "", "Returns the game runtime counter.\n\nThe game runtime counter counts the number of seconds that have elapsed while waiting for user input in the top-level context. (It does not count time spent in the main or game menus.)"], "renpy.get_on_battery": ["internal", "function", "()", "", "", ":other:\n\nReturns True if Ren'Py is running on a device that is powered by an internal battery, or False if the device is being charged by some external source."], "renpy.linux": ["other", "renpy.linux", "", "", "var", "Has a true value when running on Linux or other POSIX-like operating systems."], "renpy.emscripten": ["other", "renpy.emscripten", "", "", "var", "Has a true value when running in the browser."], "renpy.get_at_list": ["internal", "function", "(name, layer=None, camera=False)", "", "", "Returns the list of transforms being applied to the image with tag `name` on `layer`. Returns an empty list if no transforms are being applied, or None if the image is not shown.\n\nIf `layer` is None, uses the default layer for the given tag."], "renpy.music.get_pause": ["internal", "function", "(channel=\"music\")", "", "", "Returns the pause flag for `channel`."], "renpy.is_init_phase": ["internal", "function", "()", "", "", "Returns True if Ren'Py is currently executing init code, or False otherwise."], "renpy.tobytes": ["internal", "function", "(s)", "", "", "Encodes to latin-1 (where the first 256 chars are the same as ASCII.)"], "renpy.display_notify": ["internal", "function", "(message)", "", "", "The default implementation of :func:`renpy.notify`."], "renpy.Displayable": ["cdd", "renpy.Displayable", "", "", "class", "Base class for creator-defined displayables."], "renpy.set_style_preference": ["internal", "function", "(preference, alternative)", "", "", "Sets the selected alternative for the style preference.\n\n`preference` A string giving the name of the style preference.\n\n`alternative` A string giving the name of the alternative."], "renpy.roll_forward_info": ["internal", "function", "()", "", "", "When in rollback, returns the data that was supplied to :func:`renpy.checkpoint` the last time this statement executed. Outside of rollback, returns None."], "renpy.music_start": ["internal", "function", "(filename, loops=True, fadeout=None, fadein=0)", "", "", "Deprecated music start function, retained for compatibility. Use renpy.music.play() or .queue() instead."], "renpy.retain_after_load": ["internal", "function", "()", "", "", "Causes data modified between the current statement and the statement containing the next checkpoint to be retained when a load occurs."], "renpy.get_menu_args": ["internal", "function", "()", "", "", ":other:\n\nReturns a tuple giving the arguments (as a tuple) and the keyword arguments (as a dict) passed to the current menu statement."], "renpy.IgnoreEvent": ["cdd", "renpy.IgnoreEvent", "", "", "class", "This is an exception that, if raised, causes Ren'Py to ignore the event. To raise this inside the event method, write\n```\nraise renpy.IgnoreEvent()\n\n```"], "renpy.load_string": ["internal", "function", "(s, filename=\"<string>\")", "", "", "Loads `s` as Ren'Py script that can be called.\n\nReturns the name of the first statement in s.\n\n`filename` is the name of the filename that statements in the string will appear to be from."], "renpy.get_transition": ["internal", "function", "(layer=None)", "", "", "Gets the transition for `layer`, or the entire scene if `layer` is None. This returns the transition that is queued up to run during the next interaction, or None if no such transition exists."], "renpy.seen_image": ["internal", "function", "(name)", "", "", "Returns True if the named image has been seen at least once on the user's system. An image has been seen if it's been displayed using the show statement, scene statement, or :func:`renpy.show` function. (Note that there are cases where the user won't actually see the image, like a show immediately followed by a hide.)"], "renpy.register_sl_displayable": ["internal", "function", "(name, displayable, style, nchildren=0, scope=False, replaces=False, default_keywords={}, default_properties=True)", "", "", "Registers a screen language statement that creates a displayable.\n\n`name` The name of the screen language statement, a string containing a Ren'Py keyword. This keyword is used to introduce the new statement.\n\n`displayable` This is a function that, when called, returns a displayable object. All position arguments, properties, and style properties are passed as arguments to this function. Other keyword arguments are also given to this function, a described below.\n\nThis must return a Displayable. If it returns multiple displayables, the _main attribute of the outermost displayable should be set to the \\main\\ displayable - the one that children should be added to.\n\n`style` The base name of the style of this displayable. If the style property is not given, this will have the style prefix added to it. The computed style is passed to the `displayable` function as the ``style`` keyword argument.\n\n`nchildren` The number of children of this displayable. One of:\n\n0 The displayable takes no children. 1 The displayable takes 1 child. If more than one child is given, the children are placed in a Fixed. \\many\\ The displayable takes more than one child.\n\n The following arguments should be passed in using keyword arguments:\n\n`replaces` If true, and the displayable replaces a prior displayable, that displayable is passed as a parameter to the new displayable.\n\n`default_keywords` The default set of keyword arguments to supply to the displayable.\n\n`default_properties` If true, the ui and position properties are added by default.\n\nReturns an object that can have positional arguments and properties added to it by calling the following methods. Each of these methods returns the object it is called on, allowing methods to be chained together.\n\n.. method:: add_positional(name)\n\nAdds a positional argument with `name`\n\n.. method:: add_property(name)\n\nAdds a property with `name`. Properties are passed as keyword arguments.\n\n.. method:: add_style_property(name)\n\nAdds a family of properties, ending with `name` and prefixed with the various style property prefixes. For example, if called with (\\size\\), this will define size, idle_size, hover_size, etc.\n\n.. method:: add_prefix_style_property(prefix, name)\n\nAdds a family of properties with names consisting of `prefix`, a style property prefix, and `name`. For example, if called with a prefix of `text_` and a name of `size`, this will create text_size, text_idle_size, text_hover_size, etc.\n\n.. method:: add_property_group(group, prefix='')\n\nAdds a group of properties, prefixed with `prefix`. `Group` may be one of the strings:\n\n* \\bar\\ * \\box\\ * \\button\\ * \\position\\ * \\text\\ * \\window\\\n\nThese correspond to groups of :ref:`style-properties`. Group can also be \\ui\\, in which case it adds the :ref:`common ui properties <common-properties>`."], "renpy.sound.is_playing": ["internal", "function", "(channel=\"sound\")", "", "", "Returns True if the channel is currently playing a sound, False if it is not, or if the sound system isn't working."], "renpy.is_start_interact": ["internal", "function", "()", "", "", "Returns true if restart_interaction has not been called during the current interaction. This can be used to determine if the interaction is just being started, or has been restarted."], "renpy.add_to_all_stores": ["internal", "function", "(name, value)", "", "", "Adds the `value` by the `name` to all creator defined namespaces. If the name already exist in that namespace - do nothing for it.\n\nThis function may only be run from inside an init block. It is an error to run this function once the game has started."], "renpy.full_restart": ["internal", "function", "(transition=False, label=\"_invoke_main_menu\", target=\"_main_menu\", save=False)", "", "", "Causes Ren'Py to restart, returning the user to the main menu.\n\n`transition` If given, the transition to run, or None to not run a transition. False uses :var:`config.end_game_transition`.\n\n`save` If true, the game is saved in :var:`_quit_slot` before Ren'Py restarts and returns the user to the main menu."], "renpy.count_displayables_in_layer": ["internal", "function", "(layer)", "", "", "Returns how many displayables are in the supplied layer."], "renpy.get_style_preference": ["internal", "function", "(preference)", "", "", "Returns a string giving the name of the selected alternative for the named style preference.\n\n`preference` A string giving the name of the style preference."], "renpy.slot_mtime": ["internal", "function", "(slotname)", "", "", "Returns the modification time for `slot`, or None if the slot is empty."], "renpy.seen_label": ["internal", "function", "(label)", "", "", "Returns true if the named label has executed at least once on the current user's system, and false otherwise. This can be used to unlock scene galleries, for example."], "renpy.set_focus": ["internal", "function", "(screen, id, layer=\"screens\")", "", "", "This attempts to focus the displayable with `id` in the screen `screen`. Focusing will fail if the displayable isn't found, the window isn't focused, or something else is grabbing focus.\n\nThe focus may change if the mouse moves, even slightly, after this call is processed."], "renpy.get_ordered_image_attributes": ["internal", "function", "(tag, attributes=(), sort=None)", "", "", "Returns a list of image tags, ordered in a way that makes sense to present to the user.\n\n`attributes` If present, only attributes that are compatible with the given attributes are considered. (Compatible means that the attributes can be in a single image at the same time.)\n\n`sort` If not None, the returned list of attributes is sorted. This is a function that should be used as a tiebreaker."], "renpy.image": ["internal", "function", "(name, d)", "", "", "Defines an image. This function is the Python equivalent of the image statement.\n\n`name` The name of the image to display, a string.\n\n`d` The displayable to associate with that image name.\n\nThis function may only be run from inside an init block. It is an error to run this function once the game has started."], "renpy.get_sdl_dll": ["internal", "function", "()", "", "", "This returns a ctypes.cdll object that refers to the library that contains the instance of SDL2 that Ren'Py is using.\n\nIf this can not be done, None is returned."], "renpy.hide": ["internal", "function", "(name, layer=None)", "", "", "Hides an image from a layer. The Python equivalent of the hide statement.\n\n`name`  The name of the image to hide. Only the image tag is used, and  any image with the tag is hidden (the precise name does not matter).\n\n`layer`  The layer on which this function operates. If None, uses the default  layer associated with the tag."], "renpy.music.get_playing": ["internal", "function", "(channel=\"music\")", "", "", "If the given channel is playing, returns the playing file name. Otherwise, returns None."], "renpy.sound.get_loop": ["internal", "function", "(channel=\"sound\")", "", "", "Return a list of filenames that are being looped on `channel`, or None if no files are being looped. In the case where a loop is queued, but is not yet playing, the loop is returned, not the currently playing music."], "renpy.get_image_load_log": ["internal", "function", "(age=None)", "", "", "A generator that yields a log of image loading activity. For the last 100 image loads, this returns:\n\n* The time the image was loaded (in seconds since the epoch). * The filename of the image that was loaded. * A boolean that is true if the image was preloaded, and false if the   game stalled to load it.\n\nThe entries are ordered from newest to oldest.\n\n`age` If not None, only images that have been loaded in the past `age` seconds are included.\n\nThe image load log is only kept if config.developer = True."], "renpy.Render": ["cdd", "renpy.Render", "(width, height)", "", "class", "Creates a new Render object.\n\n`width`, `height` The width and height of the render object, in pixels."], "renpy.music.play": ["internal", "function", "(filenames, channel=\"music\", loop=None, fadeout=None, synchro_start=False, fadein=0, tight=None, if_changed=False, relative_volume=1.0)", "", "", "This stops the music currently playing on the numbered channel, dequeues any queued music, and begins playing the specified file or files.\n\n`filenames` This may be a single file, or a list of files to be played.\n\n`channel` The channel to play the sound on.\n\n`loop` If this is True, the tracks will loop while they are the last thing in the queue.\n\n`fadeout` If not None, this is a time in seconds to fade for. Otherwise the fadeout time is taken from config.fade_music.\n\n`synchro_start` Ren'Py will ensure that all channels of with synchro_start set to true will start playing at exactly the same time. Synchro_start should be true when playing two audio files that are meant to be synchronized with each other.\n\n`fadein` This is the number of seconds to fade the music in for, on the first loop only.\n\n`tight` If this is True, then fadeouts will span into the next-queued sound. If None, this is true when loop is True, and false otherwise.\n\n`if_changed` If this is True, and the music file is currently playing, then it will not be stopped/faded out and faded back in again, but instead will be kept playing. (This will always queue up an additional loop of the music.)\n\n`relative_volume` This is the volume relative to the current channel volume. The specified file will be played at that relative volume. If not specified, it will always default to 1.0, which plays the file at the original volume as determined by the mixer, channel and secondary volume.\n\nThis clears the pause flag for `channel`."], "renpy.version": ["internal", "function", "(tuple=False)", "", "", "If `tuple` is false, returns a string containing \\Ren'Py \\, followed by the current version of Ren'Py.\n\nIf `tuple` is true, returns a tuple giving each component of the version as an integer."], "renpy.jump_out_of_context": ["internal", "function", "(label)", "", "", "Causes control to leave the current context, and then to be transferred in the parent context to the given label."], "renpy.Render.subsurface": ["cdd", "subsurface", "(rect)", "renpy.Render", "method", "Returns a render consisting of a rectangle cut out of this render.\n\n`rect` A (x, y, width, height) tuple."], "renpy.Render.mesh": ["cdd", "mesh", "", "renpy.Render", "attribute", "This field enables model-based rendering for this Render. If true:\n\nIf set to True:\n\n* All of the children of this displayable are rendered to textures. * A mesh the size of the first child is assocated with this displayable. * A model is created with the mesh, shaders, uniforms, and properties   associated with this Render.\n\nThe model will then be drawn in a single operation."], "renpy.display_menu": ["internal", "function", "(items, interact=True, screen=\"choice\")", "", "", "This displays a menu to the user. `items` should be a list of 2-item tuples. In each tuple, the first item is a textual label, and the second item is the value to be returned if that item is selected. If the value is None, the first item is used as a menu caption.\n\nThis function takes many arguments, of which only a few are documented. Except for `items`, all arguments should be given as keyword arguments.\n\n`interact` If false, the menu is displayed, but no interaction is performed.\n\n`screen` The name of the screen used to display the menu.\n\nNote that most Ren'Py games do not use menu captions, but use narration instead. To display a menu using narration, write\n```\n$ narrator(\\Which direction would you like to go?\\, interact=False)\n$ result = renpy.display_menu([ (\\East\\, \\east\\), (\\West\\, \\west\\) ])\n\n```"], "renpy.screenshot": ["internal", "function", "(filename)", "", "", "Saves a screenshot in `filename`.\n\nReturns True if the screenshot was saved successfully, False if saving failed for some reason.\n\nThe :var:`config.screenshot_pattern` and :var:`_screenshot_pattern` variables control the file the screenshot is saved in."], "renpy.show": ["internal", "function", "(name, at_list=[], layer='master', what=None, zorder=0, tag=None, behind=[])", "", "", "Shows an image on a layer. This is the programmatic equivalent of the show statement.\n\n`name` The name of the image to show, a string.\n\n`at_list` A list of transforms that are applied to the image. The equivalent of the ``at`` property.\n\n`layer` A string, giving the name of the layer on which the image will be shown. The equivalent of the ``onlayer`` property. If None, uses the default layer associated with the tag.\n\n`what` If not None, this is a displayable that will be shown in lieu of looking on the image. (This is the equivalent of the show expression statement.) When a `what` parameter is given, `name` can be used to associate a tag with the image.\n\n`zorder` An integer, the equivalent of the ``zorder`` property. If None, the zorder is preserved if it exists, and is otherwise set to 0.\n\n`tag` A string, used to specify the image tag of the shown image. The equivalent of the ``as`` property.\n\n`behind` A list of strings, giving image tags that this image is shown behind. The equivalent of the ``behind`` property."], "renpy.mark_label_seen": ["internal", "function", "(label)", "", "", "Marks the named label as if it has been already executed on the current user's system."], "renpy.count_dialogue_blocks": ["internal", "function", "()", "", "", "Returns the number of dialogue blocks in the game's original language."], "renpy.music.register_channel": ["audio", "renpy.music.register_channel", "(name, mixer=None, loop=None, stop_on_mute=True, tight=False, file_prefix=\"\", file_suffix=\"\", buffer_queue=True, movie=False, framedrop=True)", "", "", "This registers a new audio channel named `name`. Audio can then be played on the channel by supplying the channel name to the play or queue statements.\n\n`mixer` The name of the mixer the channel uses. By default, Ren'Py knows about the \\music\\, \\sfx\\, and \\voice\\ mixers. Using other names is possible, but may require changing the preferences screens.\n\n`loop` If true, sounds on this channel loop by default.\n\n`stop_on_mute` If true, music on the channel is stopped when the channel is muted.\n\n`tight` If true, sounds will loop even when fadeout is occurring. This should be set to True for a sound effects or seamless music channel, and False if the music fades out on its own.\n\n`file_prefix` A prefix that is prepended to the filenames of the sound files being played on this channel.\n\n`file_suffix` A suffix that is appended to the filenames of the sound files being played on this channel.\n\n`buffer_queue` Should we buffer the first second or so of a queued file? This should be True for audio, and False for movie playback.\n\n`movie` If true, this channel will be set up to play back videos.\n\n`framedrop` This controls what a video does when lagging. If true, frames will be dropped to keep up with realtime and the soundtrack. If false, Ren'Py will display frames late rather than dropping them."], "renpy.list_files": ["internal", "function", "(common=False)", "", "", "Lists the files in the game directory and archive files. Returns a list of files, with / as the directory separator.\n\n`common` If true, files in the common directory are included in the listing."]}, "config": {"config.menu_arguments_callback": ["config", "config.menu_arguments_callback", " = None", "", "var", "If not None, this should be a function that takes positional and/or keyword arguments. It's called whenever a menu statement runs, with the arguments to that menu statement.\n\nThis should return a pair, containing a tuple of positional arguments (almost always empty), and a dictionary of keyword arguments."], "config.new_substitutions": ["config", "config.new_substitutions", " = True", "", "var", "If True, Ren'Py will apply new-style (square-bracket) substitutions to all text displayed."], "config.tag_zorder": ["config", "config.tag_zorder", " = { }", "", "var", "A dictionary mapping image tag strings to zorders. When an image is newly-shown without a zorder clause, the image's tag is looked up in this dictionary to find a zorder to use. If no zorder is found, 0 is used."], "config.show": ["config", "config.show", " = renpy.show", "", "var", "A function that is used in place of renpy.show by the :ref:`show <show-statement>` and :ref:`scene <scene-statement>` statements. This should have the same signature as renpy.show."], "config.enter_transition": ["config", "config.enter_transition", " = None", "", "var", "If not None, this variable should give a transition that will be used when entering the game menu."], "config.script_version": ["config", "config.script_version", " = None", "", "var", "If not None, this is interpreted as a script version. The library will use this script version to enable some compatibility features, if necessary. If None, we assume this is a latest-version script.\n\nThis is normally set in a file added by the Ren'Py launcher when distributions are built."], "config.exception_handler": ["config", "config.exception_handler", " = None", "", "var", "If not None, this should be a function that takes three arguments:\n\n* A string giving the text of a traceback, abbreviated so that it only includes   creator-written files. * The full text of the traceback, including both creator-written and Ren'Py   files. * The path to a file containing a traceback method.\n\nThis function can present the error to a user in any way fit. If it returns True, the exception is ignored and control is transferred to the next statement. If it returns False, the built-in exception handler is use. This function may also call :fu…